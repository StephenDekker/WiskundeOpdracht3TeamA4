import numpy as np
import control as ct
from scipy.signal import place_poles

# Timestep instellen
timestep = 2e-3

# Parameters
d = 0.02  # Diameter of breedte
l = 0.6   # Lengte
rho = 700  # Dichtheid
m = rho * d * l * d  # Massa
g = 9.81

# Inertie berekeningen
Icm = (1 / 12) * rho * d**2 * l * (d**2 + l**2)
I = (1 / 12) * rho * d**4 * l + (1 / 3) * rho * d**2 * l**3

k1=100
k2=100
rho=700
size1=0.2
size2=0.2
c1=0
c2=-1
m1=rho*size1**3
m2=rho*size2**3


A = np.asarray([[0, 1, 0, 0],
                [0, 0, -0.1099193106982333, 0],
                [0, 0, 0, 1],
                [0, 0, 24.792911314788288, 0]])

B = np.asarray([[0],
                [0.08895186688749995],
                [0],
                [-0.22231791224403552]])

Q = np.array([[50000, 0, 0, 0],
[0, 9000, 0, 0],
[0, 0, 1000, 0],
[0, 0, 0, 10]])
R = np.array([[100]])
matrix_K = ct.lqr(A,B,Q,R)[0]

# Pole-Placement Controller
class pp_controller:
    def __init__(self, A, B, desired_poles):
        # Controleer of het systeem controleerbaar is
        controllability = np.linalg.matrix_rank(np.hstack((B, A @ B, A @ A @ B, A @ A @ A @ B)))
        if controllability < A.shape[0]:
            raise ValueError("Het systeem is niet controleerbaar en pole placement is niet mogelijk.")

        # Bereken K met pole placement
        place_result = place_poles(A, B, desired_poles)
        self.matrix_gain = matrix_K
        print("Gain matrix K berekend:")
        print(self.matrix_gain)

# Gewenste polen (voorbeeld)
desired_poles = [-2, -4, -6, -8]

# Maak een controller aan
try:
    controller = pp_controller(A ,B, desired_poles)
except ValueError as e:
    print("Fout bij controller initialisatie:", e)
